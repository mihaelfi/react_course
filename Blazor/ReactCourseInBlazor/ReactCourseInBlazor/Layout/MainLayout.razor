@inherits LayoutComponentBase
<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())"/>
        React Course In Blazor
        <MudSpacer/>
        <MudIconButton Icon="@_darkModeToggleIcon" Color="Color.Inherit" Edge="Edge.End" OnClick="@((e) => DarkModeToggle())"/>

    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen" Elevation="2">
        <MudDrawerHeader>
            <MudText Typo="Typo.h5" Class="mt-1">React In Blazor</MudText>
        </MudDrawerHeader>
        <MyNavMenu/>
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;
    private readonly MudTheme _theme = new();
    private bool _isDarkMode = true;
    private string _darkModeToggleIcon = Icons.Material.Filled.DarkMode;
    
    
    protected override void OnInitialized()
    {
        base.OnInitialized();

        SetDarkModeToggleButtonIcon();
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
        SetDarkModeToggleButtonIcon();
        
    }
    void SetDarkModeToggleButtonIcon()
    {
        _darkModeToggleIcon = _isDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode;
    }

}