@page "/Pages/Lecture01/Solution/ContactUs"
@using ReactCourseInBlazor.Layout.Lecture01
@layout AnimalStoreMainLayout
@using FluentValidation
@using ReactCourseInBlazor.Common.Models.Lecture01
@using ReactCourseInBlazor.Services
@inject DataService DataService
@inject NavigationManager NavigationManager

<MudText Typo="Typo.h5" Align="Align.Left">Contact Us:</MudText>
<br/>
<MudDivider></MudDivider>

<MudCard>
    <MudForm Model="@_model" @ref="@_form" Validation="@(_orderValidator.ValidateValue)" ValidationDelay="0">
        <MudCardContent>
            <MudTextField UserAttributes="@InputAttributes" @bind-Value="_model.FirstName" For="@(() => _model.FirstName)" Immediate="true" Label="First Name"></MudTextField>
            <MudTextField UserAttributes="@InputAttributes" @bind-Value="_model.LastName" For="@(() => _model.LastName)" Immediate="true" Label="Last Name"></MudTextField>
            <MudTextField UserAttributes="@InputAttributes" @bind-Value="_model.Email" For="@(() => _model.Email)" Immediate="true" Label="Email"></MudTextField>
            <MudTextField @bind-Value="_model.Message" Label="Message" Variant="Variant.Text" Lines="5"/>
        </MudCardContent>
        <MudCardActions>
            <MudStack Row="true">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Submit</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(() => { _model = new ContactUsFormModel(); })">Reset</MudButton>
            </MudStack>
        </MudCardActions>
    </MudForm>
</MudCard>

@code {
    
    [Inject] ISnackbar? Snackbar { get; set; }
    

    private ContactUsFormModel _model = new();
    private MudForm? _form;

    private Dictionary<string, object> InputAttributes { get; set; } =
        new()
        {
            { "autocomplete", "off" },
        };

    readonly OrderModelFluentValidator _orderValidator = new();

    /// <summary>
    /// A standard AbstractValidator which contains multiple rules and can be shared with the back end API
    /// </summary>
    /// <typeparam name="OrderModel"></typeparam>
    public class OrderModelFluentValidator : AbstractValidator<ContactUsFormModel>
    {
        public OrderModelFluentValidator()
        {
            RuleFor(x => x.FirstName).NotEmpty().Length(1, 10);
            RuleFor(x => x.LastName).NotEmpty().Length(1, 10);
            RuleFor(x => x.Email).Cascade(CascadeMode.Stop).NotEmpty().EmailAddress();
            RuleFor(x => x.Gender).NotEmpty().InclusiveBetween(0, 1);
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            
            var result = await ValidateAsync(ValidationContext<ContactUsFormModel>.CreateWithOptions((ContactUsFormModel)model, x => x.IncludeProperties(propertyName)));
            return result.IsValid ? Array.Empty<string>() : result.Errors.Select(e => e.ErrorMessage);
        };
    }
    
    private async Task Submit()
    {
        Console.WriteLine($"Submitting form...");
        if (_form != null)
        {
            await _form.Validate();

            if (_form.IsValid)
            {
                Console.WriteLine($"Form Valid...");
                Snackbar?.Add("Submitted!");
                DataService.FormModel = _model;
                await Task.Delay(500); // delay for 2 seconds
                NavigationManager.NavigateTo("/Pages/Lecture01/Solution/SavePage");
            }
            else
            {
                Console.WriteLine($"Form not valid");    
            }
            
        }
    }

}